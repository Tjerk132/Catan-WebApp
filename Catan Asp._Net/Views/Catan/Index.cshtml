<link rel="stylesheet" href="../Content/style.css" type="text/css">
@using Catan_Asp._Net.Views.Catan
@{
    //ViewBag.Title = "Catan";

    HexagonPosition position = new HexagonPosition();
    Materials materialchooser = new Materials();
    Drawnumber drawnumber = new Drawnumber();
    Docks docks = new Docks();
}

@{
    int margin_left = 203;  //Start x-position for 1st row
    int margin_top = -62;   //Start y-position for 1st row
    int margin_leftnumber;

    string px = "px";
}


<body>
    <div class="box">
        <p style="font-size: 28px; transform: rotate(90deg); " >:^)</p>
    </div>

    <div class="save-container">
    <div class="saves">
        <form>
            <p>Save 1</p>
            <p>20-3-2019</p>
            <input class="ctn-btn" type="submit" value="Load">
        </form>
    </div>

    <div class="saves">
        <form>
            <p>Save 2</p>
            <p>21-3-2019</p>
            <input class="ctn-btn" type="submit" value="Load">
        </form>
    </div>
    </div>
    <div class="grid-container">
        @{int dockRandom = docks.DockPattern(); }

        @for (int i = 0; i < 37; i++)
        {
            margin_left = position.Margin_Left(i, margin_left);
            margin_top = position.Margin_Top(i, margin_top);
            margin_leftnumber = position.Margin_LeftNumbers(margin_left);

            if (i > 4 && i != 8 && i != 9 && i != 14 && i != 15 && i != 21 && i != 22 && i != 27 && i != 28 && i < 32)
            {
                if (materialchooser.ChooseMaterial() > 0)
                {
                    string id = materialchooser.returnHexagon(materialchooser.MaterialChooser);
                    <div id="@id" class="item7" style="margin-top:@margin_top@px; margin-left:@margin_left@px"></div>
                }
                if (materialchooser.MaterialChooser == 1)
                {
                    <div class="circle-text" style="margin-top:@margin_top@px; margin-left:@margin_leftnumber@px;">
                        <img class="robber" src="~/Images/rover.jpg" alt="rover" width="30" height="40">
                    </div>
                }
                else
                {
                    if (drawnumber.MakeNumber())
                    {
                        Response.Redirect(HttpContext.Current.Request.Url.ToString(), true);
                    }
                    string number = drawnumber.SetNumbers(drawnumber.number);
                    <div class="circle-text" style="margin-top:@margin_top@px; margin-left:@margin_leftnumber@px">
                        <p class="number_position" style="font-size:20px">@drawnumber.number</p>
                        <p class="dot_position">@number</p>
                    </div>
                }
            }
            //Make Surrounding Hexagons Blue\\
            else //if tile is not a playground hexagon
            {
                <div id="hexagonblue" class="item7" style="margin-top:@margin_top@px; margin-left:@margin_left@px"></div>

                List<int> positions =  docks.DockPatternPositions(i, dockRandom);
                if (positions.Contains(i))
                {
                    <div class="circle-text" style="margin-top:@margin_top@px; margin-left:@margin_leftnumber@px">
                        <img src=@docks.DockType() style="max-width:170%; max-height:170%; margin-top:-9px" />
                    </div>
                }         
            }
        }
    </div>
</body>
